import * as path from 'path';
import * as assert from 'assert';
import * as ttm from 'azure-pipelines-task-lib/mock-test';

describe('NuGet Vulnerability Scan task tests', function() {

    before(function() {

    });

    after(() => {

    });

    it('should succeed with required inputs', function(done: Mocha.Done) {
        this.timeout(10000);

        let tp = path.join(__dirname, 'requiredInputs.js');
        let tr: ttm.MockTestRunner = new ttm.MockTestRunner(tp);

        tr.run();
        assert.equal(tr.succeeded, true, 'should have succeeded');
        assert.equal(tr.stdOutContained("No vunlerabilities found"), true, 'should have correct message in output');
        assert.equal(tr.warningIssues.length, 0, "should have no warnings");
        assert.equal(tr.errorIssues.length, 0, "should have no errors");
        done();
    });

    it('should fail task when vulnerabilities are found', function(done: Mocha.Done) {
        this.timeout(10000);

        let tp = path.join(__dirname, 'failOnVulnerabilities.js');
        let tr: ttm.MockTestRunner = new ttm.MockTestRunner(tp);

        tr.run();

        assert.equal(tr.succeeded, false, 'should have failed');
        assert.equal(tr.warningIssues.length, 0, "should have no warnings");
        assert.equal(tr.errorIssues.length, 1, "should have one error");
        assert.equal(tr.errorIssues[0], 'Vulnerabilities found', 'should have vulnerabilities found message');
        done();
    });

    it('should fail on invalid level', function(done: Mocha.Done) {
        this.timeout(10000);

        let tp = path.join(__dirname, 'invalidLevel.js');
        let tr: ttm.MockTestRunner = new ttm.MockTestRunner(tp);

        tr.run();
        assert.strictEqual(tr.succeeded, false, 'should have failed');
        assert.strictEqual(tr.warningIssues.length, 0, "should have no warnings");
        assert.strictEqual(tr.errorIssues.length, 1, "should have 1 error issue");
        assert.strictEqual(tr.errorIssues[0], 'Unexpected level', 'error issue output');
        done();
    });

    it('should fail if missing path', (done: () => void) => {
        this.timeout(10000);

        let tp = path.join(__dirname, 'missingPath.js');
        let tr: ttm.MockTestRunner = new ttm.MockTestRunner(tp);

        tr.run();
        assert.strictEqual(tr.succeeded, false, 'should have failed');
        assert.strictEqual(tr.warningIssues.length, 0, "should have no warnings");
        assert.strictEqual(tr.errorIssues.length, 1, "should have 1 error issue");
        assert.strictEqual(tr.errorIssues[0], 'Input required: path', 'error issue output');
        done();
    });

    it('should fail if missing level', (done: () => void) => {
        this.timeout(10000);

        let tp = path.join(__dirname, 'missingLevel.js');
        let tr: ttm.MockTestRunner = new ttm.MockTestRunner(tp);

        tr.run();
        assert.strictEqual(tr.succeeded, false, 'should have failed');
        assert.strictEqual(tr.warningIssues.length, 0, "should have no warnings");
        assert.strictEqual(tr.errorIssues.length, 1, "should have 1 error issue");
        assert.strictEqual(tr.errorIssues[0], 'Input required: level', 'error issue output');
        done();
    });

    it('should append --include-transitive if flag is set', (done: () => void) => {
        this.timeout(10000);

        let tp = path.join(__dirname, 'transitiveFlag.js');
        let tr: ttm.MockTestRunner = new ttm.MockTestRunner(tp);

        tr.run();
        assert.strictEqual(tr.succeeded, true, 'should have succeeded');
        assert.equal(tr.stdOutContained("No vunlerabilities found"), true, 'should have correct message in output');
        assert.strictEqual(tr.warningIssues.length, 0, "should have no warnings");
        assert.strictEqual(tr.errorIssues.length, 0, "should have no errors");
        done();
    });
});
